start_leaflet %>%
addPolylines(
data = track_lines,
color = "firebrick",
weight = ~ 1 / speed,
opacity = .8
)
start_leaflet %>%
addPolylines(
data = track_lines,
color = "firebrick",
weight = ~ 1 / max(speed, 1),
opacity = .8
)
start_leaflet %>%
addPolylines(
data = track_lines,
color = "firebrick",
weight = ~ 1 / pmax(speed, 1),
opacity = .8
)
start_leaflet %>%
addPolylines(
data = track_lines,
color = "firebrick",
weight = ~ 1 / pmax(speed, .1),
opacity = .8
)
start_leaflet %>%
addPolylines(
data = track_lines,
color = "#762495",
weight = ~ 1 / pmax(speed, .1),
opacity = .8
)
start_leaflet %>%
addPolylines(
data = track_lines,
color = "#762495",
weight = ~ 3 / pmax(speed, .1),
opacity = .8
)
start_leaflet %>%
addPolylines(
data = track_lines,
color = "#762495",
weight = ~ 2 / pmax(speed, .1),
opacity = .8
)
start_leaflet %>%
addPolylines(
data = track_lines,
color = "#762495",
weight = ~ 5 / pmax(speed, .5),
opacity = .8
)
start_leaflet %>%
addPolylines(
data = track_lines,
color = "#762495",
weight = ~ 10 / pmax(speed, 1),
opacity = .8
)
start_leaflet %>%
addPolylines(
data = track_lines,
color = "#762495",
weight = ~ 1 / pmax(speed, .1),
opacity = .8
)
start_leaflet %>%
addPolylines(
data = track_lines,
color = "#762495",
weight = ~ 2 / pmax(speed, .1),
opacity = .8
)
leaflet(
options = leafletOptions(
crs = leafletCRS(code = "EPSG:4490")
)
) %>%
addProviderTiles(
providers$OpenStreetMap
) %>%
addPolylines(
data = stay_paths,
color = "#762495",
weight = 5,
opacity = .8
) %>%
addCircleMarkers(
data = stay_points,
color = "#762495",
radius = 5,
fillOpacity = .5
)
# Draw the track points
ggplot() +
geom_sf(data = track_points)
# Add a map tile
ggplot() +
annotation_map_tile(type = "osmtransport") +
geom_sf(
data = track_points,
color = "firebrick"
)
track_points
ggplot() +
annotation_map_tile(type = "osmtransport") +
geom_sf(
data = track_points,
aes(color = ele)
)
ggplot() +
annotation_map_tile(type = "osmtransport") +
geom_sf(
data = track_points,
aes(color = ele)
) +
scale_color_viridis_c(
option = "F",
direction = -1
)
# Vary the color by elevation
ggplot() +
annotation_map_tile(type = "osmtransport") +
geom_sf(
data = track_points,
# put ele in the aes() function
aes(color = duration_sec)
) +
scale_color_viridis_c(
option = "F",
direction = -1
)
track_points_cleaned <- track_points %>%
st_transform(4490) %>%
select(track_seg_point_id:time) %>%
mutate(point_id = row_number()) %>%
mutate(
lead_time = lead(time),
duration_sec = as.numeric(lead_time - time)
)
# Vary the color by elevation
ggplot() +
annotation_map_tile(type = "osmtransport") +
geom_sf(
data = track_points_cleaned,
# put ele in the aes() function
aes(color = duration_sec)
) +
scale_color_viridis_c(
option = "F",
direction = -1
)
# Vary the color by elevation
ggplot() +
annotation_map_tile(type = "osmtransport") +
geom_sf(
data = track_points_cleaned,
# put ele in the aes() function
aes(color = log10(duration_sec))
) +
scale_color_viridis_c(
option = "F",
direction = -1
)
ggplot() +
annotation_map_tile(type = "osmtransport") +
geom_sf(
data = track_lines,
lwd = 3,
color = "firebrick"
)
ggplot() +
annotation_map_tile(
type = "osmtransport"
) +
geom_sf(
data = track_lines,
aes(color = speed, lwd = 1/speed)
) +
scale_color_viridis_c(
option = "F",
direction = -1
) +
scale_linewidth_continuous(
range = c(1, 10)
)
ggplot() +
annotation_map_tile(
type = "osmtransport"
) +
geom_sf(
data = track_lines,
aes(color = speed,
lwd = 2 / pmax(speed, .1))
) +
scale_color_viridis_c(
option = "F",
direction = -1
) +
scale_linewidth_continuous(
range = c(1, 10)
)
lwd = 1 / speed
) +
ggplot() +
annotation_map_tile(
type = "osmtransport"
) +
geom_sf(
data = track_lines,
aes(color = speed,
lwd = 1 / speed)
) +
scale_color_viridis_c(
option = "F",
direction = -1
) +
scale_linewidth_continuous(
range = c(1, 10)
)
ggplot() +
annotation_map_tile(
type = "osmtransport"
) +
geom_sf(
data = track_lines,
aes(color = speed,
lwd = 1 / speed)
) +
scale_color_viridis_c(
option = "F",
direction = -1
)
leaflet(
options = leafletOptions(
crs = leafletCRS(code = "EPSG:4490")
)
) %>%
addProviderTiles(
providers$OpenStreetMap
) %>%
addPolylines(
data = track_lines,
color = "#762495",
weight = 5,
opacity = .8
)
start_leaflet %>%
addPolylines(
data = track_lines,
color = "#762495",
weight = ~ (1 - percent_rank(speed)) * 10,
opacity = .8
)
pal <- colorQuantile(
palette = "Purples",
domain = track_lines$speed,
reverse = TRUE
)
start_leaflet %>%
addPolylines(
data = track_lines,
color = ~ pal(speed),
weight = ~ (1 - percent_rank(speed)) * 10,
opacity = .8
)
# Vary the color by speed
pal <- colorQuantile(
palette = "Purples",
domain = track_lines$speed,
reverse = TRUE
)
start_leaflet %>%
addPolylines(
data = track_lines,
color = ~ pal(speed),
weight = ~ (1 - percent_rank(speed)) * 10,
opacity = .8
)
# ================= Solution 2: Find Certain Points =================
stay_points <- track_points_cleaned %>%
anti_join(track_lines %>% tibble(), by = "point_id") %>%
filter(duraction_sec > 30)
# ================= Solution 2: Filter Points/Segments =================
stay_points <- track_points_cleaned %>%
anti_join(track_lines %>% tibble(), by = "point_id") %>%
filter(duration_sec > 30)
slow_points <- track_points_cleaned %>%
semi_join(
track_lines %>%
tibble() %>%
filter(speed < 2),
by = "point_id"
)
selected_points <- slow_points %>%
bind_rows(stay_points) %>%
arrange(point_id)
selected_paths <- selected_points %>%
points_to_linestrings()
ggplot() +
annotation_map_tile(type = "osmtransport") +
geom_sf(
data = selected_paths,
color = "firebrick",
lwd = 1
) +
geom_sf(
data = selected_points,
color = "firebrick",
alpha = .5,
size = 5)
ggplot() +
annotation_map_tile(type = "osmtransport") +
geom_sf(
data = selected_paths,
color = "firebrick",
lwd = 1
) +
geom_sf(
data = selected_points,
color = "firebrick",
alpha = .5,
size = 3)
start_leaflet %>%
addPolylines(
data = stay_paths,
color = "#762495",
weight = 5,
opacity = .8
) %>%
addCircleMarkers(
data = stay_points,
color = "#762495",
radius = 5,
fillOpacity = .5
)
# Change to your own folder
folder <- "D:/R/Teaching/2024 Summer R Workshop"
# Run this line to format all R scripts in the folder
styler::style_dir(folder)
# 下面的数据来自 http://gaohr.win/site/blogs/2017/2017-04-18-GIS-basic-data-of-China.html
master_folder <- "D:/R/Teaching/2024 Summer R Workshop/Week 9/China Shapefiles"
# Boundary
cnboundary_land <- str_glue("{master_folder}/China Boundary") %>%
read_and_convert_sf("CN-boundary-land.shp")
read_and_convert_sf <- function(folder_name, file_name) {
output_sf <- paste(folder_name, file_name, sep = "/") %>%
st_read(quiet = TRUE) %>%
rename_with(tolower) %>%
st_transform(4490)
print(output_sf)
return(output_sf)
}
# Boundary
cnboundary_land <- str_glue("{master_folder}/China Boundary") %>%
read_and_convert_sf("CN-boundary-land.shp")
file <- str_glue("{master_folder}/visited_cities.xlsx")
read_and_convert_sf <- function(folder_name, file_name) {
output_sf <- paste(folder_name, file_name, sep = "/") %>%
st_read(quiet = TRUE) %>%
rename_with(tolower) %>%
st_transform(4490)
print(output_sf)
return(output_sf)
}
# 行政区划来自 http://horizon2021.xyz/
cncity <- master_folder %>%
paste0("/City Boundary") %>%
read_and_convert_sf("city.shp") %>%
rename(
city = 地市,
prov = first_省区
)
cnprov <- master_folder %>%
paste0("/City Boundary") %>%
read_and_convert_sf("province.shp")
# 下面的数据来自 http://gaohr.win/site/blogs/2017/2017-04-18-GIS-basic-data-of-China.html
# Boundary
cnboundary_land <- master_folder %>%
paste0("/China Boundary") %>%
read_and_convert_sf("CN-boundary-land.shp")
cnboundary_sea <- master_folder %>%
paste0("/China Boundary") %>%
read_and_convert_sf("CN-boundary-sea.shp")
# South China Sea
southsea_nine_dash <- master_folder %>%
paste0("/South Sea") %>%
read_and_convert_sf("nine_dash_line.shp")
southsea_islands <- master_folder %>%
paste0("/South Sea") %>%
read_and_convert_sf("islands.shp")
# About the data
cnprov
cnprov %>%
class()
cnprov %>%
tibble()
# A simple map
ggplot(cnprov) +
geom_sf()
ggplot() +
# I prefer to specify the data argument in each geom
geom_sf(data = cnprov)
ggplot() +
geom_sf(data = southsea_nine_dash)
# Add two layers in one map
ggplot() +
geom_sf(data = cnprov) +
geom_sf(data = southsea_nine_dash)
# Add more layers
ggplot() +
geom_sf(data = cnprov) +
geom_sf(data = cnboundary_land, lwd = 1) +
geom_sf(data = cnboundary_sea, color = "#444444", lwd = .05) +
geom_sf(data = southsea_nine_dash, color = "black", lwd = 1) +
geom_sf(data = southsea_islands, color = "#444444")
# Use arguments to customize the plot
(gg <- ggplot() +
geom_sf(
data = cnprov,
fill = NA, # No fill (transparent)
color = "darkgray", # Border color
lwd = .3 # Border width
) +
geom_sf(data = cnboundary_land, lwd = 1) +
geom_sf(data = cnboundary_sea, color = "#444444", lwd = .05) +
geom_sf(data = southsea_nine_dash, color = "black", lwd = 1) +
geom_sf(data = southsea_islands, color = "#444444"))
# (x <- y) is equivalent to x <- y, and then print x
(x <- 1 + 1)
# Change the coordinate system
# This makes the map look less distorted
gg +
coord_sf(
ylim = c(-2387082, 1654989),
# x = longitude 经度
xlim = c(-3700000, 1400000), # Adjust the limits of the longitude
crs = "+proj=laea +lat_0=40 +lon_0=116" # Adjust the central point
)
gg +
coord_sf(
ylim = c(-2387082, 1654989),
xlim = c(-2500000, 3100000),
crs = "+proj=laea +lat_0=40 +lon_0=104"
)
# Change the breaks of the longitude
(gg <- gg +
coord_sf(
ylim = c(-2387082, 1654989),
xlim = c(-2500000, 3100000),
crs = "+proj=laea +lat_0=40 +lon_0=104"
) +
# x = longitude
scale_x_continuous(breaks = seq(80, 130, 10)))
# Change the breaks of the longitude
gg +
# x = longitude
scale_x_continuous(breaks = seq(80, 130, 10))
# Add a scale bar
gg +
annotation_scale()
gg +
# Adjust the position of the scale bar
annotation_scale(
location = "bl",
pad_x = unit(1, "cm"),
pad_y = unit(.5, "cm")
)
# Add a north arrow
gg +
annotation_north_arrow()
gg +
annotation_north_arrow(
style = north_arrow_fancy_orienteering()
)
gg +
annotation_north_arrow(
style = north_arrow_fancy_orienteering(),
location = "tl",
height = unit(2, "cm"),
width = unit(2, "cm")
)
gg +
annotation_north_arrow(
style = north_arrow_fancy_orienteering(),
location = "tl",
height = unit(2, "cm"),
width = unit(2, "cm"),
pad_x = unit(1, "cm"),
pad_y = unit(1, "cm")
)
# Add a base map (Internet connection required)
gg +
# Choose the type "osmtransport"
# There are many options, but most of them actually do not work
annotation_map_tile(type = "osmtransport")
ggplot() +
# Typically, the base map is added first
annotation_map_tile(type = "osmtransport") +
geom_sf(
data = cnprov,
fill = NA,
color = "darkgray",
lwd = .3
)
# Change the theme
gg +
theme_void()
