color = "darkgray",
lwd = .3
)
# Change the theme
gg +
theme_void()
gg +
theme_map()
cnprov
###################### Map with a single color ######################
selected_prov <- cnprov %>%
filter(between(shape_area, 14, 16))
selected_prov
# Wrong
ggplot() +
geom_sf(
data = selected_prov,
fill = "firebrick"
)
# Correct
ggplot() +
geom_sf(
data = cnprov,
fill = NA,
color = "lightgray",
lwd = .15
) +
geom_sf(
data = selected_prov,
fill = "firebrick"
)
# Correct
ggplot() +
geom_sf(
data = cnprov,
fill = NA,
color = "lightgray",
lwd = .15
) +
geom_sf(
data = selected_prov,
fill = "firebrick"
)+
theme_bw()
###################### Map with multiple colors ######################
ggplot() +
geom_sf(
data = cnprov,
# always call aes() when mapping a variable to a color
aes(fill = shape_area),
color = "lightgray",
lwd = .15
)
ggplot() +
geom_sf(
data = cnprov,
# always call aes() when mapping a variable to a color
aes(fill = shape_area),
color = "lightgray",
lwd = .15
) +
scale_fill_distiller(palette = "YlOrRd", direction = 1)
cnprov %>%
mutate(
area_5g = cut_quantile(shape_area, n = 5)
) %>%
ggplot() +
geom_sf(
aes(fill = area_5g),
color = "lightgray",
lwd = .15
) +
scale_fill_brewer(palette = "YlOrRd", direction = 1)
cnprov %>%
mutate(
area_5g = cut_length(shape_area, n = 5)
) %>%
ggplot() +
geom_sf(
aes(fill = area_5g),
color = "lightgray",
lwd = .15
) +
scale_fill_brewer(palette = "YlOrRd", direction = 1)
###################### Map with a single color ######################
travel_plot <- function(data, fill = "firebrick") {
cncity_visit <- cncity %>%
mutate(
city = if_else(
str_detect(prov, "香港|澳门"),
prov, city
)
) %>%
left_join(
data,
by = "city"
) %>%
mutate(
visit = !is.na(visit_year)
)
g1 <- ggplot() +
annotation_map_tile(type = "osmtransport") +
geom_sf(
data = cncity_visit,
aes(fill = visit),
color = "lightgray",
lwd = .15
) +
geom_sf(
data = cnprov,
fill = NA,
color = "darkgray",
lwd = .3
) +
geom_sf(data = cnboundary_land, lwd = 1) +
geom_sf(data = cnboundary_sea, color = "#444444", lwd = .05) +
geom_sf(data = southsea_nine_dash, color = "black", lwd = 1) +
geom_sf(data = southsea_islands, color = "#444444") +
coord_sf(
ylim = c(-2387082, 1654989),
xlim = c(-2500000, 3100000),
crs = "+proj=laea +lat_0=40 +lon_0=104"
) +
scale_fill_manual(values = c("white", fill)) +
annotation_scale(
location = "bl",
pad_x = unit(1, "cm"),
pad_y = unit(.5, "cm")
) +
annotation_north_arrow(
style = north_arrow_fancy_orienteering(),
location = "tl",
height = unit(2, "cm"),
width = unit(2, "cm"),
pad_x = unit(1, "cm"),
pad_y = unit(1, "cm")
) +
theme_void() +
theme(
axis.line = element_blank(),
panel.border = element_blank(),
legend.position = "none"
)
g2 <- ggplot() +
annotation_map_tile(type = "osmtransport", zoom = 2) +
geom_sf(
data = cncity_visit,
aes(fill = visit),
color = "lightgray",
lwd = .15
) +
geom_sf(
data = cnprov,
fill = NA,
color = "darkgray",
lwd = .3
) +
geom_sf(data = cnboundary_land, lwd = 1) +
geom_sf(data = cnboundary_sea, color = "#444444", lwd = .05) +
geom_sf(data = southsea_nine_dash, color = "black", lwd = 1) +
geom_sf(data = southsea_islands, color = "#444444") +
coord_sf(
ylim = c(-4028017, -1877844),
xlim = c(117131.4, 2115095),
crs = "+proj=laea +lat_0=40 +lon_0=104"
) +
scale_fill_manual(values = c("white", fill)) +
scale_x_continuous(breaks = 120) +
scale_y_continuous(breaks = 0:2 * 10) +
theme(
axis.text = element_blank(),
axis.ticks = element_blank(),
axis.title = element_blank(),
panel.background = element_blank(),
panel.border = element_rect(
fill = NA,
color = "grey10",
linetype = 1,
linewidth = 1
),
plot.margin = unit(c(0, 0, 0, 0), "mm"),
legend.position = "none"
)
ggdraw() +
draw_plot(g1) +
draw_plot(
g2,
x = 0.79,
y = -.13,
width = 0.2,
height = 0.6
)
}
file <- str_glue("{master_folder}/visited_cities.xlsx")
my_cities <- read_data(file) %>%
filter(visit_year >= 2023)
my_cities
travel_plot(my_cities)
ggsave("D:/R/Teaching/2024 Summer R Workshop/Week 9/travelmap.png", width = 12, height = 8.67)
travel_plot_by_var <- function(data, var, palette = "YlOrRd") {
cncity_visit <- cncity %>%
mutate(
city = if_else(
str_detect(prov, "香港|澳门"),
prov, city
)
) %>%
right_join(
data,
by = "city"
) %>%
mutate(
visit = !is.na(visit_year)
)
g1 <- ggplot() +
annotation_map_tile(type = "osmtransport") +
geom_sf(
data = cncity_visit,
aes(fill = {{ var }}),
color = "lightgray",
lwd = .15
) +
geom_sf(
data = cnprov,
fill = NA,
color = "darkgray",
lwd = .3
) +
geom_sf(data = cnboundary_land, lwd = 1) +
geom_sf(data = cnboundary_sea, color = "#444444", lwd = .05) +
geom_sf(data = southsea_nine_dash, color = "black", lwd = 1) +
geom_sf(data = southsea_islands, color = "#444444") +
coord_sf(
ylim = c(-2387082, 1654989),
xlim = c(-2500000, 3100000),
crs = "+proj=laea +lat_0=40 +lon_0=104"
) +
scale_fill_distiller(palette = palette, direction = 1) +
annotation_scale(
location = "bl",
pad_x = unit(1, "cm"),
pad_y = unit(.5, "cm")
) +
annotation_north_arrow(
style = north_arrow_fancy_orienteering(),
location = "tl",
height = unit(2, "cm"),
width = unit(2, "cm"),
pad_x = unit(1, "cm"),
pad_y = unit(1, "cm")
) +
theme_void() +
theme(
axis.line = element_blank(),
panel.border = element_blank(),
legend.position = "none"
)
g2 <- ggplot() +
annotation_map_tile(type = "osmtransport", zoom = 2) +
geom_sf(
data = cncity_visit,
aes(fill = {{ var }}),
color = "lightgray",
lwd = .15
) +
geom_sf(
data = cnprov,
fill = NA,
color = "darkgray",
lwd = .3
) +
geom_sf(data = cnboundary_land, lwd = 1) +
geom_sf(data = cnboundary_sea, color = "#444444", lwd = .05) +
geom_sf(data = southsea_nine_dash, color = "black", lwd = 1) +
geom_sf(data = southsea_islands, color = "#444444") +
coord_sf(
ylim = c(-4028017, -1877844),
xlim = c(117131.4, 2115095),
crs = "+proj=laea +lat_0=40 +lon_0=104"
) +
scale_fill_distiller(palette = palette, direction = 1) +
scale_x_continuous(breaks = 120) +
scale_y_continuous(breaks = 0:2 * 10) +
theme(
axis.text = element_blank(),
axis.ticks = element_blank(),
axis.title = element_blank(),
panel.background = element_blank(),
panel.border = element_rect(
fill = NA,
color = "grey10",
linetype = 1,
linewidth = 1
),
plot.margin = unit(c(0, 0, 0, 0), "mm"),
legend.position = "none"
)
ggdraw() +
draw_plot(g1) +
draw_plot(
g2,
x = 0.79,
y = -.13,
width = 0.2,
height = 0.6
)
}
my_cities <- read_data(file) %>%
filter(visit_year >= 2014)
travel_plot_by_var(my_cities, visit_year)
pacman::p_load(
sf, leaflet, ggspatial,
hms, tidyverse, statart
)
folder <- "D:/R/Teaching/2024 Summer R Workshop/Week 9/Workout GPX"
gpx_files <- list.files(folder, "*.gpx", full.names = TRUE)
gpx_files <- list.files(folder, "*.gpx", full.names = TRUE)
gpx_files
gpx_files[2]
# ================= Import GPX =================
# Convert the first GPX file to an sf object
track_points <- gpx_files[2] %>%
tmaptools::read_GPX(
layers = "track_points",
remove.empty.layers = TRUE,
as.sf = TRUE
) %>%
.$track_points
track_points
# Draw the track points
ggplot() +
geom_sf(data = track_points)
ggplot() +
geom_sf(
data = track_points,
color = "firebrick"
)
# Add a map tile
ggplot() +
annotation_map_tile(type = "osmtransport") +
geom_sf(
data = track_points,
color = "firebrick"
)
# Vary the color by elevation
ggplot() +
annotation_map_tile(type = "osmtransport") +
geom_sf(
data = track_points,
# put ele in the aes() function
aes(color = time)
) +
scale_color_viridis_c(
option = "F",
direction = -1
)
track_points_cleaned <- track_points %>%
# Set the CRS to China Geodetic Coordinate System 2000
st_transform(4490) %>%
select(track_seg_point_id:time) %>%
mutate(
point_id = row_number(),
lead_time = lead(time),
duration_sec = as.numeric(lead_time - time)
)
track_points_cleaned
points_to_linestrings <- function(points_sf) {
lines_sf <- points_sf %>%
mutate(lead_geometry = lead(geometry)) %>%
mutate(geometry = st_union(geometry, lead_geometry)) %>%
st_cast("LINESTRING") %>%
mutate(
distance_m = st_length(.) %>%
as.numeric()
) %>%
filter(distance_m > 0)
message("\nPlease ignore the warning messages.")
return(lines_sf)
}
track_lines <- track_points_cleaned %>%
points_to_linestrings() %>%
mutate(
speed = distance_m / duration_sec
) %>%
filter(speed < 40)
track_lines
ggplot() +
annotation_map_tile(type = "osmtransport") +
geom_sf(
data = track_lines,
lwd = 3,
color = "firebrick"
)
ggplot() +
annotation_map_tile(
type = "osmtransport"
) +
geom_sf(
data = track_lines,
aes(
color = speed,
lwd = 1 / speed
)
) +
scale_color_viridis_c(
option = "F",
direction = -1
)
# Draw segments with leaflet
osm_leaflet <- leaflet(
options = leafletOptions(
crs = leafletCRS(code = "EPSG:4490")
)
) %>%
addProviderTiles(
providers$OpenStreetMap
)
osm_leaflet %>%
addPolylines(
data = track_lines,
color = "#762495",
weight = 5,
opacity = .8
)
# Vary the line width by speed
osm_leaflet %>%
addPolylines(
data = track_lines,
color = "#762495",
# Algorithm 1
weight = ~ (1 - percent_rank(speed)) * 10,
opacity = .8
)
osm_leaflet %>%
addPolylines(
data = track_lines,
color = "#762495",
# Algorithm 2
weight = ~ 2 / pmax(speed, .1),
opacity = .8
)
# Vary the color by speed (not recommended in this case)
pal <- colorQuantile(
palette = "Purples",
domain = track_lines$speed,
reverse = TRUE
)
osm_leaflet %>%
addPolylines(
data = track_lines,
color = ~ pal(speed),
weight = ~ (1 - percent_rank(speed)) * 10,
opacity = .8
)
# ================= Solution 2: Filter Points/Segments =================
stay_points <- track_points_cleaned %>%
anti_join(track_lines %>% tibble(), by = "point_id") %>%
filter(duration_sec > 30)
stay_points
slow_points <- track_points_cleaned %>%
semi_join(
track_lines %>%
tibble() %>%
filter(speed < 2),
by = "point_id"
)
selected_points <- slow_points %>%
bind_rows(stay_points) %>%
arrange(point_id)
selected_points
selected_paths <- selected_points %>%
points_to_linestrings()
selected_paths
ggplot() +
annotation_map_tile(type = "osmtransport") +
geom_sf(
data = selected_paths,
color = "firebrick",
lwd = 1
) +
geom_sf(
data = selected_points,
color = "firebrick",
alpha = .5,
size = 3
)
osm_leaflet %>%
addPolylines(
data = stay_paths,
color = "#762495",
weight = 5,
opacity = .8
) %>%
addCircleMarkers(
data = stay_points,
color = "#762495",
radius = 5,
fillOpacity = .5
)
osm_leaflet %>%
addPolylines(
data = selected_paths,
color = "#762495",
weight = 5,
opacity = .8
) %>%
addCircleMarkers(
data = selected_points,
color = "#762495",
radius = 5,
fillOpacity = .5
)
