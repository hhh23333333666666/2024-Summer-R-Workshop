addProviderTiles(
"Esri.WorldGrayCanvas",
group = "WorldGrayCanvas"
) %>%
addLayersControl(
baseGroups = c(
"WorldImagery",
"OpenStreetMap",
"WorldStreetMap",
"WorldGrayCanvas"
),
# position it on the topleft
position = "topleft"
) %>%
addMiniMap(
tiles = "OpenStreetMap.HOT",
# tiles = "Esri.WorldGrayCanvas",
zoomLevelOffset = -5
) %>%
addPolylines(
data = photo_segments,
popup = ~label
) %>%
addCircleMarkers(
data = photo_points,
popup = ~label,
color = "#00192f",
weight = 2.5,
fill = TRUE,
fillColor = "skyblue",
fillOpacity = .8,
radius = 9
)
leaflet(
width = 1280,
height = 750,
options = leafletOptions(
crs = leafletCRS(code = "EPSG:4490"),
proj4def = "+proj=longlat +ellps=GRS80 +no_defs"
)
) %>%
addProviderTiles(
"Esri.WorldImagery",
group = "WorldImagery"
) %>%
addProviderTiles(
"OpenStreetMap",
group = "OpenStreetMap"
) %>%
addProviderTiles(
"Esri.WorldStreetMap",
group = "WorldStreetMap"
) %>%
addProviderTiles(
"Esri.WorldGrayCanvas",
group = "WorldGrayCanvas"
) %>%
addLayersControl(
baseGroups = c(
"WorldImagery",
"OpenStreetMap",
"WorldStreetMap",
"WorldGrayCanvas"
),
# position it on the topleft
position = "topleft"
) %>%
addMiniMap(
tiles = "OpenStreetMap.HOT",
# tiles = "Esri.WorldGrayCanvas",
zoomLevelOffset = -5
) %>%
addPolylines(
data = photo_segments,
popup = ~label
) %>%
addCircleMarkers(
data = photo_points,
popup = ~label,
color = "#00192f",
weight = 2.5,
fill = TRUE,
fillColor = "skyblue",
fillOpacity = .8,
radius = 9
) %>%
write_leaflet("D:/R/Teaching/2024 Summer R Workshop/Week 10/photos.html")
write_leaflet <- function(map, file) {
class(map) <- c("write_leaflet", class(map))
attr(map, "filesave") <- file
print(map)
}
print.write_leaflet <- function(x, ...) {
class(x) <- class(x)[class(x) != "write_leaflet"]
htmltools::save_html(x, file = attr(x, "filesave"))
print("HTML file saved!")
}
leaflet(
width = 1280,
height = 750,
options = leafletOptions(
crs = leafletCRS(code = "EPSG:4490"),
proj4def = "+proj=longlat +ellps=GRS80 +no_defs"
)
) %>%
addProviderTiles(
"Esri.WorldImagery",
group = "WorldImagery"
) %>%
addProviderTiles(
"OpenStreetMap",
group = "OpenStreetMap"
) %>%
addProviderTiles(
"Esri.WorldStreetMap",
group = "WorldStreetMap"
) %>%
addProviderTiles(
"Esri.WorldGrayCanvas",
group = "WorldGrayCanvas"
) %>%
addLayersControl(
baseGroups = c(
"WorldImagery",
"OpenStreetMap",
"WorldStreetMap",
"WorldGrayCanvas"
),
# position it on the topleft
position = "topleft"
) %>%
addMiniMap(
tiles = "OpenStreetMap.HOT",
# tiles = "Esri.WorldGrayCanvas",
zoomLevelOffset = -5
) %>%
addPolylines(
data = photo_segments,
popup = ~label
) %>%
addCircleMarkers(
data = photo_points,
popup = ~label,
color = "#00192f",
weight = 2.5,
fill = TRUE,
fillColor = "skyblue",
fillOpacity = .8,
radius = 9
) %>%
write_leaflet("D:/R/Teaching/2024 Summer R Workshop/Week 10/photos.html")
photo_points <- photo_data %>%
mutate(
GPSDateTime = as_datetime(GPSDateTime, tz = "Asia/Shanghai"),
GPSDateTime_num = as.numeric(GPSDateTime),
GPSYear = GPSDateTime %>% year()
) %>%
filter(!is.na(GPSYear)) %>%
mutate(
GPSDate_label = format(GPSDateTime, "%Y-%m-%d (%A)"),
GPSTime_label = format(GPSDateTime, "%H:%M"),
label = paste0(
"<b>日期: </b>", GPSDate_label, "<br/>",
"<b>时间: </b>", GPSTime_label, "<br/>",
"<img src=",
'\"', SourceFile, '\" width=300> <br/>',
"<font color=\"lightgray\"><i><b>文件名: </b>", SourceFile, "</b></font>"
)
) %>%
st_as_sf(coords = c("GPSLongitude", "GPSLatitude"))
photo_segments <- photo_points %>%
arrange(GPSDateTime) %>%
mutate(
lag_GPSDateTime = lag(GPSDateTime),
diff_GPSDateTime = difftime(GPSDateTime, lag_GPSDateTime, units = "hours") %>% as.numeric(),
lag_geometry = lag(geometry)
) %>%
# filter(diff_GPSDateTime > 1e-4) %>%
mutate(
diff_degree =
st_distance(geometry, lag_geometry, by_element = TRUE) %>%
as.numeric(), # [degree]
diff_km = diff_degree * 111, # [km]
speed = diff_km / diff_GPSDateTime, # [km/h]
id = row_number(),
label = paste0(
"<b>日期: </b>", GPSDate_label, "<br/>",
"<b>时间: </b>", GPSTime_label, "<br/>",
"<b>距离: </b>", sprintf("%.1f", diff_km), " km<br/>",
"<b>持续时间: </b>", sprintf("%.2f", diff_GPSDateTime), " h<br/>",
"<b>时速: </b>", sprintf("%.1f", speed), " km/h<br/>",
"<img src=",
'\"', SourceFile, '\" width=300> <br/>',
"<font color=\"lightgray\"><i><b>文件名: </b>", SourceFile, "</b></font>"
)
) %>%
filter(diff_km > .01) %>%
rowwise() %>%
mutate(geometry = st_union(lag_geometry, geometry)) %>%
ungroup() %>%
st_cast("LINESTRING")
write_leaflet <- function(map, file) {
class(map) <- c("write_leaflet", class(map))
attr(map, "filesave") <- file
print(map)
}
print.write_leaflet <- function(x, ...) {
class(x) <- class(x)[class(x) != "write_leaflet"]
htmltools::save_html(x, file = attr(x, "filesave"))
print("HTML file saved!")
}
leaflet(
width = 1280,
height = 750,
options = leafletOptions(
crs = leafletCRS(code = "EPSG:4490"),
proj4def = "+proj=longlat +ellps=GRS80 +no_defs"
)
) %>%
addProviderTiles(
"Esri.WorldImagery",
group = "WorldImagery"
) %>%
addProviderTiles(
"OpenStreetMap",
group = "OpenStreetMap"
) %>%
addProviderTiles(
"Esri.WorldStreetMap",
group = "WorldStreetMap"
) %>%
addProviderTiles(
"Esri.WorldGrayCanvas",
group = "WorldGrayCanvas"
) %>%
addLayersControl(
baseGroups = c(
"WorldImagery",
"OpenStreetMap",
"WorldStreetMap",
"WorldGrayCanvas"
),
# position it on the topleft
position = "topleft"
) %>%
addMiniMap(
tiles = "OpenStreetMap.HOT",
# tiles = "Esri.WorldGrayCanvas",
zoomLevelOffset = -5
) %>%
addPolylines(
data = photo_segments,
popup = ~label
) %>%
addCircleMarkers(
data = photo_points,
popup = ~label,
color = "#00192f",
weight = 2.5,
fill = TRUE,
fillColor = "skyblue",
fillOpacity = .8,
radius = 9
) %>%
write_leaflet("D:/R/Teaching/2024 Summer R Workshop/Week 10/photos.html")
photo_points %>%
arrange(GPSDateTime) %>%
mutate(
lag_GPSDateTime = lag(GPSDateTime),
diff_GPSDateTime = difftime(GPSDateTime, lag_GPSDateTime, units = "hours") %>% as.numeric()
) %>%
points_to_linestrings()
points_to_linestrings <- function(points_sf) {
lines_sf <- points_sf %>%
mutate(lead_geometry = lead(geometry)) %>%
mutate(geometry = st_union(geometry, lead_geometry)) %>%
st_cast("LINESTRING") %>%
mutate(
distance_m = st_length(.) %>%
as.numeric()
) %>%
filter(distance_m > 0)
return(lines_sf)
}
photo_points %>%
arrange(GPSDateTime) %>%
mutate(
lag_GPSDateTime = lag(GPSDateTime),
diff_GPSDateTime = difftime(GPSDateTime, lag_GPSDateTime, units = "hours") %>% as.numeric()
) %>%
points_to_linestrings()
points_to_linestrings <- function(points_sf) {
lines_sf <- points_sf %>%
mutate(lead_geometry = lead(geometry)) %>%
mutate(geometry = st_union(geometry, lead_geometry)) %>%
st_cast("LINESTRING")
return(lines_sf)
}
photo_points %>%
arrange(GPSDateTime) %>%
mutate(
lag_GPSDateTime = lag(GPSDateTime),
diff_GPSDateTime = difftime(GPSDateTime, lag_GPSDateTime, units = "hours") %>% as.numeric()
) %>%
points_to_linestrings()
points_to_linestrings <- function(points_sf) {
lines_sf <- points_sf %>%
mutate(lead_geometry = lead(geometry)) %>%
rowwise() %>%
mutate(geometry = st_union(geometry, lead_geometry)) %>%
st_cast("LINESTRING")
return(lines_sf)
}
photo_points %>%
arrange(GPSDateTime) %>%
mutate(
lag_GPSDateTime = lag(GPSDateTime),
diff_GPSDateTime = difftime(GPSDateTime, lag_GPSDateTime, units = "hours") %>% as.numeric()
) %>%
points_to_linestrings()
points_to_linestrings <- function(points_sf) {
lines_sf <- points_sf %>%
mutate(lead_geometry = lead(geometry)) %>%
mutate(geometry = st_union(geometry, lead_geometry)) %>%
slice(-1) %>%
st_cast("LINESTRING")
return(lines_sf)
}
photo_points %>%
arrange(GPSDateTime) %>%
mutate(
lag_GPSDateTime = lag(GPSDateTime),
diff_GPSDateTime = difftime(GPSDateTime, lag_GPSDateTime, units = "hours") %>% as.numeric()
) %>%
points_to_linestrings()
photo_points %>%
arrange(GPSDateTime) %>%
mutate(
lag_GPSDateTime = lag(GPSDateTime),
diff_GPSDateTime = difftime(GPSDateTime, lag_GPSDateTime, units = "hours") %>% as.numeric()
) %>%
mutate(lead_geometry = lead(geometry))
points_to_linestrings <- function(points_sf) {
lines_sf <- points_sf %>%
mutate(lead_geometry = lead(geometry)) %>%
rowwise() %>%
mutate(geometry = st_union(geometry, lead_geometry)) %>%
ungroup() %>%
st_cast("LINESTRING")
return(lines_sf)
}
photo_points %>%
arrange(GPSDateTime) %>%
mutate(
lag_GPSDateTime = lag(GPSDateTime),
diff_GPSDateTime = difftime(GPSDateTime, lag_GPSDateTime, units = "hours") %>% as.numeric()
) %>%
points_to_linestrings()
photo_points %>%
arrange(GPSDateTime) %>%
mutate(
lag_GPSDateTime = lag(GPSDateTime),
diff_GPSDateTime = difftime(GPSDateTime, lag_GPSDateTime, units = "hours") %>% as.numeric()
)points_sf %>%
photo_points %>%
arrange(GPSDateTime) %>%
mutate(
lag_GPSDateTime = lag(GPSDateTime),
diff_GPSDateTime = difftime(GPSDateTime, lag_GPSDateTime, units = "hours") %>% as.numeric()
) %>%
mutate(lead_geometry = lead(geometry)) %>%
rowwise() %>%
mutate(geometry = st_union(geometry, lead_geometry)) %>%
ungroup()
points_to_linestrings() %>%
select(geometry)
photo_points %>%
arrange(GPSDateTime) %>%
mutate(
lag_GPSDateTime = lag(GPSDateTime),
diff_GPSDateTime = difftime(GPSDateTime, lag_GPSDateTime, units = "hours") %>% as.numeric()
) %>%
mutate(lead_geometry = lead(geometry)) %>%
rowwise() %>%
mutate(geometry = st_union(geometry, lead_geometry)) %>%
ungroup() %>%
select(geometry)
points_to_linestrings <- function(points_sf) {
lines_sf <- points_sf %>%
mutate(lead_geometry = lead(geometry)) %>%
mutate(geometry = st_union(geometry, lead_geometry)) %>%
slice(-n()) %>%
st_cast("LINESTRING")
return(lines_sf)
}
photo_points %>%
arrange(GPSDateTime) %>%
mutate(
lag_GPSDateTime = lag(GPSDateTime),
diff_GPSDateTime = difftime(GPSDateTime, lag_GPSDateTime, units = "hours") %>% as.numeric()
) %>%
mutate(lead_geometry = lead(geometry)) %>%
points_to_linestrings()
points_to_linestrings <- function(points_sf) {
lines_sf <- points_sf %>%
mutate(lead_geometry = lead(geometry)) %>%
rowwise() %>%
mutate(geometry = st_union(geometry, lead_geometry)) %>%
ungroup() %>%
slice(-n()) %>%
st_cast("LINESTRING")
return(lines_sf)
}
photo_points %>%
arrange(GPSDateTime) %>%
mutate(
lag_GPSDateTime = lag(GPSDateTime),
diff_GPSDateTime = difftime(GPSDateTime, lag_GPSDateTime, units = "hours") %>% as.numeric()
) %>%
points_to_linestrings()
photo_points %>%
arrange(GPSDateTime) %>%
mutate(
lag_GPSDateTime = lag(GPSDateTime),
diff_GPSDateTime = difftime(GPSDateTime, lag_GPSDateTime, units = "hours") %>% as.numeric()
) %>%
points_to_linestrings() %>%
mutate(
distance = st_length(.)
) %>%
select(distance)
photo_points %>%
arrange(GPSDateTime) %>%
mutate(
lag_GPSDateTime = lag(GPSDateTime),
diff_GPSDateTime = difftime(GPSDateTime, lag_GPSDateTime, units = "hours") %>% as.numeric()
) %>%
points_to_linestrings() %>%
mutate(
distance_km = st_length(.) * 111,
speed = distance_km / diff_GPSDateTime, # [km/h]
id = row_number(),
label = paste0(
"<b>日期: </b>", GPSDate_label, "<br/>",
"<b>时间: </b>", GPSTime_label, "<br/>",
"<b>距离: </b>", sprintf("%.1f", distance_km), " km<br/>",
"<b>持续时间: </b>", sprintf("%.2f", diff_GPSDateTime), " h<br/>",
"<b>时速: </b>", sprintf("%.1f", speed), " km/h<br/>",
"<img src=",
'\"', SourceFile, '\" width=300> <br/>',
"<font color=\"lightgray\"><i><b>文件名: </b>", SourceFile, "</b></font>"
)
)
write_leaflet <- function(map, file) {
class(map) <- c("write_leaflet", class(map))
attr(map, "filesave") <- file
print(map)
}
leaflet(
width = 1280,
height = 750,
options = leafletOptions(
crs = leafletCRS(code = "EPSG:4490"),
proj4def = "+proj=longlat +ellps=GRS80 +no_defs"
)
) %>%
addProviderTiles(
"Esri.WorldImagery",
group = "WorldImagery"
) %>%
addProviderTiles(
"OpenStreetMap",
group = "OpenStreetMap"
) %>%
addProviderTiles(
"Esri.WorldStreetMap",
group = "WorldStreetMap"
) %>%
addProviderTiles(
"Esri.WorldGrayCanvas",
group = "WorldGrayCanvas"
) %>%
addLayersControl(
baseGroups = c(
"WorldImagery",
"OpenStreetMap",
"WorldStreetMap",
"WorldGrayCanvas"
),
# position it on the topleft
position = "topleft"
) %>%
addMiniMap(
tiles = "OpenStreetMap.HOT",
# tiles = "Esri.WorldGrayCanvas",
zoomLevelOffset = -5
) %>%
addPolylines(
data = photo_segments,
popup = ~label
) %>%
addCircleMarkers(
data = photo_points,
popup = ~label,
color = "#00192f",
weight = 2.5,
fill = TRUE,
fillColor = "skyblue",
fillOpacity = .8,
radius = 9
) %>%
write_leaflet("D:/R/Teaching/2024 Summer R Workshop/Week 10/photos.html")
