ggraph() +
geom_edge_fan() +
theme_void()
# A graph with only nodes
highschool_graph %>%
ggraph() +
geom_node_point() +
theme_void()
# A graph with both nodes and edges
highschool_graph %>%
ggraph() +
geom_edge_fan() +
geom_node_point() +
theme_void()
# prettify the graph
highschool_graph %>%
ggraph() +
geom_edge_fan(color = "gray", alpha = .5) +
geom_node_point(aes(size = between_centrality, alpha = between_centrality)) +
theme_void()
# Control the modifiable aesthetics
highschool_graph %>%
ggraph() +
geom_edge_fan(color = "gray", alpha = .5) +
geom_node_point(aes(size = between_centrality, alpha = between_centrality)) +
# size between 1 and 8
scale_size_continuous(range = c(1, 8)) +
theme_void()
# Add labels to the nodes
# This step is optional
highschool_graph %>%
ggraph() +
geom_edge_fan(color = "gray", alpha = .5) +
geom_node_point(aes(size = between_centrality, alpha = between_centrality)) +
geom_node_text(aes(label = name), color = "white") +
scale_size_continuous(range = c(1, 8)) +
theme_void()
# Add labels to the nodes
# This step is optional
highschool_graph %>%
ggraph() +
geom_edge_fan(color = "gray", alpha = .5) +
geom_node_point(aes(size = between_centrality, alpha = between_centrality)) +
geom_node_text(aes(label = name), color = "black") +
scale_size_continuous(range = c(1, 8)) +
theme_void()
# Change the layout
# This step is optional
highschool_graph %>%
# Other layout options: linear, matrix, fr, etc.
ggraph(layout = "kk") +
geom_edge_fan(color = "gray", alpha = .5) +
geom_node_point(aes(size = between_centrality, alpha = between_centrality)) +
geom_node_text(aes(label = name), color = "white") +
scale_size_continuous(range = c(1, 8)) +
theme_void()
# Change the layout
# This step is optional
highschool_graph %>%
# Other layout options: linear, matrix, fr, etc.
ggraph(layout = "linear") +
geom_edge_fan(color = "gray", alpha = .5) +
geom_node_point(aes(size = between_centrality, alpha = between_centrality)) +
geom_node_text(aes(label = name), color = "white") +
scale_size_continuous(range = c(1, 8)) +
theme_void()
#################### Visualize the graph ####################
# A graph with only edges
highschool_graph %>%
ggraph() +
geom_edge_fan() +
theme_void()
# A graph with only nodes
highschool_graph %>%
ggraph() +
geom_node_point() +
theme_void()
#################### Prepare Data ####################
tb <- read_data("D:/R/Teaching/2024 Summer R Workshop/Week 10/Participant Information.xlsx")
tb
tb %>%
filter(!is.na(`Research Areas`)) %>%
rename_with(~ c("name", "major", "area", "software")) %>%
select(1:3)
?unite
tb %>%
filter(!is.na(`Research Areas`)) %>%
rename_with(~ c("name", "major", "area", "software")) %>%
select(1:3) %>%
unite(area, major, area, sep = " ")
tb %>%
filter(!is.na(`Research Areas`)) %>%
rename_with(~ c("name", "major", "area", "software")) %>%
select(1:3) %>%
unite(area, major, area, sep = " ") %>%
unnest_tokens(feature, area)
tb %>%
filter(!is.na(`Research Areas`)) %>%
rename_with(~ c("name", "major", "area", "software")) %>%
select(1:3) %>%
unite(area, major, area, sep = " ") %>%
unnest_tokens(feature, area) %>% # from tidytext
# Remove some common words
filter(!feature %in% c("science", "and", "of", "governance", "design"))
features_tb <- tb %>%
filter(!is.na(`Research Areas`)) %>%
rename_with(~ c("name", "major", "area", "software")) %>%
select(1:3) %>%
unite(area, major, area, sep = " ") %>%
unnest_tokens(feature, area) %>% # from tidytext
# Remove some common words
filter(!feature %in% c("science", "and", "of", "governance", "design")) %>%
# Deduplicate 对每个人去重
distinct(feature, .by = name, .keep_all = TRUE) %>%
# Only keep features that appear more than once
filter(n() > 1, .by = feature)
features_tb
features_tb <- tb %>%
filter(!is.na(`Research Areas`)) %>%
rename_with(~ c("name", "major", "area", "software")) %>%
select(1:3) %>%
unite(area, major, area, sep = " ") %>%
unnest_tokens(feature, area) %>% # from tidytext
# Remove some common words
filter(!feature %in% c("science", "and", "of", "governance", "design")) %>%
# Deduplicate 对每个人去重
distinct(feature, .by = name, .keep_all = TRUE) %>%
group_by(feature) %>%
# Only keep features that appear more than once
filter(n() > 1)
features_tb
features_tb <- tb %>%
filter(!is.na(`Research Areas`)) %>%
rename_with(~ c("name", "major", "area", "software")) %>%
select(1:3) %>%
unite(area, major, area, sep = " ") %>%
unnest_tokens(feature, area) %>% # from tidytext
# Remove some common words
filter(!feature %in% c("science", "and", "of", "governance", "design")) %>%
# Deduplicate 对每个人去重
group_by(name) %>%
distinct(feature, .keep_all = TRUE) %>%
ungroup() %>%
# Only keep features that appear more than once
filter(n() > 1)
features_tb <- tb %>%
filter(!is.na(`Research Areas`)) %>%
rename_with(~ c("name", "major", "area", "software")) %>%
select(1:3) %>%
unite(area, major, area, sep = " ") %>%
unnest_tokens(feature, area) %>% # from tidytext
# Remove some common words
filter(!feature %in% c("science", "and", "of", "governance", "design")) %>%
# Deduplicate 对每个人去重
group_by(name) %>%
distinct(feature, .keep_all = TRUE) %>%
ungroup() %>%
# Only keep features that appear more than once
filter(n() > 1, .by = feature)
features_tb
features_tb %>%
rename(from = name)
features_tb %>%
rename(to = name)
features_tb %>%
rename(from = name) %>%
full_join(
features_tb %>%
rename(to = name),
by = "feature", relationship = "many-to-many"
)
features_tb %>%
rename(from = name) %>%
full_join(
features_tb %>%
rename(to = name),
by = "feature", relationship = "many-to-many"
) %>%
mutate(record = 1)
features_tb %>%
rename(from = name) %>%
full_join(
features_tb %>%
rename(to = name),
by = "feature", relationship = "many-to-many"
) %>%
mutate(record = 1) %>%
complete(from, to, fill = list(record = 0)) %>%
filter(from != to)
features_tb %>%
rename(from = name) %>%
full_join(
features_tb %>%
rename(to = name),
by = "feature", relationship = "many-to-many"
) %>%
mutate(record = 1) %>%
complete(from, to, fill = list(record = 0)) %>%
filter(from != to) %>%
summarise(similarity = sum(record), .by = c(from, to))
network_tb <- features_tb %>%
rename(from = name) %>%
full_join(
features_tb %>%
rename(to = name),
by = "feature", relationship = "many-to-many"
) %>%
mutate(record = 1) %>%
complete(from, to, fill = list(record = 0)) %>%
filter(from != to) %>%
summarise(similarity = sum(record), .by = c(from, to))
network_tb %>%
ggplot() +
geom_tile(aes(from, to, fill = similarity %>% factor() %>% fct_rev())) +
scale_fill_brewer("Similarity", palette = "YlOrRd", direction = -1) +
theme_minimal() +
theme(
axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1),
axis.title = element_blank(),
panel.grid = element_blank()
)
#################### Visualize Data as a Matrix ####################
network_tb <- features_tb %>%
rename(from = name) %>%
full_join(
features_tb %>%
rename(to = name),
by = "feature", relationship = "many-to-many"
) %>%
mutate(record = 1) %>%
complete(from, to, fill = list(record = 0)) %>%
filter(from != to) %>%
summarise(similarity = sum(record), .by = c(from, to)) %>%
# from this row on, we are simply reordering the factors
mutate(from_mean_similarity = mean(similarity), .by = from) %>%
mutate(to_mean_similarity = mean(similarity), .by = to) %>%
mutate(
from = from %>% fct_reorder(-from_mean_similarity),
to = to %>% fct_reorder(-to_mean_similarity)
) %>%
select(-from_mean_similarity, -to_mean_similarity)
network_tb %>%
ggplot() +
geom_tile(aes(from, to, fill = similarity %>% factor() %>% fct_rev())) +
scale_fill_brewer("Similarity", palette = "YlOrRd", direction = -1) +
theme_minimal() +
theme(
axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1),
axis.title = element_blank(),
panel.grid = element_blank()
)
#################### Visualize Data as a Graph ####################
graph <- network_tb %>%
as_tbl_graph(directed = FALSE)
# To view more rows
graph %>%
activate(edges) %>%
as_tibble() %>%
print(n = 20)
graph %>%
activate(edges) %>%
as_tibble() %>%
print_interval()
graph
# To view more rows
graph %>%
activate(edges) %>%
as_tibble() %>%
print(n = 20)
# To view more rows
graph %>%
activate(edges) %>%
print(n = 20)
# Visualize Network
graph %>%
ggraph() +
geom_edge_hive(aes(edge_width = similarity, alpha = similarity),
color = "#4D4A44"
) +
geom_node_label(aes(label = name)) +
theme_void()
# Visualize Network
graph %>%
ggraph() +
geom_edge_hive(aes(edge_width = similarity, alpha = similarity),
color = "#4D4A44"
) +
geom_node_label(aes(label = name)) +
theme_void()
# Visualize Network
graph %>%
ggraph() +
geom_edge_hive(aes(edge_width = similarity, alpha = similarity),
color = "#4D4A44"
) +
geom_node_label(aes(label = name)) +
theme_void()
graph %>%
activate(edges) %>%
filter(as_numeric(similarity) > 1)
# Remove Weak Connections
graph %>%
activate(edges) %>%
filter(as_numeric(similarity) > 1) %>% # remove weak connections
mutate(similarity = factor(similarity)) %>%
# activate(nodes) %>%
# filter(!node_is_isolated()) %>% # remove isolated nodes
ggraph() +
geom_edge_hive(
aes(edge_width = similarity, alpha = similarity),
color = "#4D4A44"
) +
geom_node_label(aes(label = name)) +
theme_void()
# Remove Weak Connections
graph %>%
activate(edges) %>%
filter(as_numeric(similarity) > 1) %>% # remove weak connections
mutate(similarity = factor(similarity)) %>%
activate(nodes) %>%
filter(!node_is_isolated()) %>% # remove isolated nodes
ggraph() +
geom_edge_hive(
aes(edge_width = similarity, alpha = similarity),
color = "#4D4A44"
) +
geom_node_label(aes(label = name)) +
theme_void()
# Visualize in a Linear Layout
graph %>%
activate(edges) %>%
filter(similarity > 2) %>%
mutate(similarity = factor(similarity)) %>%
ggraph(layout = "matrix") +
geom_edge_arc(aes(edge_width = similarity, alpha = similarity),
color = "#4D4A44"
) +
geom_node_label(aes(label = name)) +
theme_void()
# ========== Locations from Photos ========== #
folder <- "D:/Photos/2024"
photos <- list.files(
pattern = ".(jpg|JPG|PNG)$",
path = folder,
full.names = TRUE
)
length(photos)
photo_data <- read_exif(
photos,
tags = c(
"Model", "ISO", "ExposureTime", "FOV", "LightValue",
"GPSDateTime", "GPSLatitude", "GPSLongitude", "GPSAltitude"
)
) %>%
# record the duration (usually it takes <1 second)
s_time()
photo_data
# ========== Generate Points Data ========== #
photo_points <- photo_data %>%
mutate(
GPSDateTime = as_datetime(GPSDateTime, tz = "Asia/Shanghai"),
GPSDateTime_num = as.numeric(GPSDateTime),
GPSYear = GPSDateTime %>% year()
) %>%
filter(!is.na(GPSYear)) %>%
mutate(
GPSDate_label = format(GPSDateTime, "%Y-%m-%d (%A)"),
GPSTime_label = format(GPSDateTime, "%H:%M"),
label = paste0(
"<b>日期: </b>", GPSDate_label, "<br/>",
"<b>时间: </b>", GPSTime_label, "<br/>",
"<img src=",
'\"', SourceFile, '\" width=300> <br/>',
"<font color=\"lightgray\"><i><b>文件名: </b>", SourceFile, "</b></font>"
)
) %>%
st_as_sf(coords = c("GPSLongitude", "GPSLatitude"))
photo_points
photo_points %>%
as_tibble() %>%
select(label)
photo_points %>%
as_tibble() %>%
select(label) %>%
slice(1) %>%
pull(1)
# ========== Generate Segments Data ========== #
points_to_linestrings <- function(points_sf) {
lines_sf <- points_sf %>%
mutate(lead_geometry = lead(geometry)) %>%
rowwise() %>%
mutate(geometry = st_union(geometry, lead_geometry)) %>%
ungroup() %>%
slice(-n()) %>%
st_cast("LINESTRING")
return(lines_sf)
}
photo_segments <- photo_points %>%
arrange(GPSDateTime) %>%
mutate(
lag_GPSDateTime = lag(GPSDateTime),
diff_GPSDateTime = difftime(GPSDateTime, lag_GPSDateTime, units = "hours") %>% as.numeric()
) %>%
points_to_linestrings() %>%
mutate(
distance_km = st_length(.) * 111,
speed = distance_km / diff_GPSDateTime, # [km/h]
id = row_number(),
label = paste0(
"<b>日期: </b>", GPSDate_label, "<br/>",
"<b>时间: </b>", GPSTime_label, "<br/>",
"<b>距离: </b>", sprintf("%.1f", distance_km), " km<br/>",
"<b>持续时间: </b>", sprintf("%.2f", diff_GPSDateTime), " h<br/>",
"<b>时速: </b>", sprintf("%.1f", speed), " km/h<br/>",
"<img src=",
'\"', SourceFile, '\" width=300> <br/>',
"<font color=\"lightgray\"><i><b>文件名: </b>", SourceFile, "</b></font>"
)
)
write_leaflet <- function(map, file) {
class(map) <- c("write_leaflet", class(map))
attr(map, "filesave") <- file
print(map)
}
print.write_leaflet <- function(x, ...) {
class(x) <- class(x)[class(x) != "write_leaflet"]
htmltools::save_html(x, file = attr(x, "filesave"))
print("HTML file saved!")
}
start_leaflet <- leaflet(
width = 1280,
height = 750,
options = leafletOptions(
crs = leafletCRS(code = "EPSG:4490"),
proj4def = "+proj=longlat +ellps=GRS80 +no_defs"
)
) %>%
addProviderTiles(
"Esri.WorldImagery",
group = "WorldImagery"
) %>%
addProviderTiles(
"OpenStreetMap",
group = "OpenStreetMap"
) %>%
addProviderTiles(
"Esri.WorldStreetMap",
group = "WorldStreetMap"
) %>%
addProviderTiles(
"Esri.WorldGrayCanvas",
group = "WorldGrayCanvas"
) %>%
addLayersControl(
baseGroups = c(
"WorldImagery",
"OpenStreetMap",
"WorldStreetMap",
"WorldGrayCanvas"
),
# position it on the topleft
position = "topleft"
) %>%
addMiniMap(
tiles = "OpenStreetMap.HOT",
# tiles = "Esri.WorldGrayCanvas",
zoomLevelOffset = -5
)
start_leaflet
start_leaflet %>%
addPolylines(
data = photo_segments,
popup = ~label
) %>%
addCircleMarkers(
data = photo_points,
popup = ~label,
color = "#00192f",
weight = 2.5,
fill = TRUE,
fillColor = "skyblue",
fillOpacity = .8,
radius = 9
) %>%
write_leaflet("D:/R/Teaching/2024 Summer R Workshop/Week 10/photos.html")
# Load packages
pacman::p_load(
haven, jsonlite, arrow,
lubridate, tidyverse, statart,
broom, flextable, lme4,
ggspatial, ggthemes, ggpubr, scales
)
current_folder <-
"D:/Dissertation/Scripts/Essay1/IneqSEEDS" # where this script locates
setwd(current_folder)
source("0. Data_Directories.R")
source("1. Local_Functions.R")
tb <- read_data(
str_glue("{seeds_folder}/seeds_20240811.dta")
)
library(flextable)
tb_deid <- read_data(
str_glue("{seeds_folder}/seeds_deid_20240811.dta")
)
tb_deid %>%
codebook() %>%
as_flextable(max_row = Inf) %>%
save_as_html(path = "D:/Dissertation/Scripts/Essay1/Basic Description/seeds_deid_codebook.html")
# Change to your own folder
folder <- "D:/R/Teaching/2024 Summer R Workshop"
# Run this line to format all R scripts in the folder
styler::style_dir(folder)
